import { chain, noop, Rule } from '@angular-devkit/schematics';
import { applyEsLintFix, createSchematicWithMetricsIfInstalled, install, ngAddPackages, getO3rPeerDeps  } from '@o3r/schematics';
import type { NgAddSchematicsSchema } from './schema';
import * as path from 'node:path';

const doCustomAction: Rule = (tree, _context) => {
  // your custom code here
  return tree;
};

/**
 * Add Otter <%= featureName %> to an Otter Project
 *
 * @param options
 */
function ngAddFn(options: NgAddSchematicsSchema): Rule {
  return async (_tree, context) => {
    // retrieve dependencies following the /^@o3r\/.*/ pattern within the peerDependencies of the current module
    const depsInfo = getO3rPeerDeps(path.resolve(__dirname, '..', '..', 'package.json'));
    return chain([
      // optional custom action dedicated to this module
      doCustomAction,
      options.skipLinter ? noop() : applyEsLintFix(),
      // install packages needed in the current module
      options.skipInstall ? noop : install,
      // add the missing Otter modules in the current project
      ngAddPackages(depsInfo.o3rPeerDeps, { skipConfirmation: true, version: depsInfo.packageVersion, parentPackageInfo: `${depsInfo.packageName!} - setup` })
    ]);
  };
}

export const ngAdd = createSchematicWithMetricsIfInstalled(ngAddFn);
