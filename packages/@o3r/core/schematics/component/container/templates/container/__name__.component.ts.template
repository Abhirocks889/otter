import {ChangeDetectionStrategy, Component, OnDestroy, OnInit, ViewEncapsulation} from '@angular/core';
import {O3rComponent} from '@o3r/core';
import {Subscription} from 'rxjs';
<% if (componentStructure === 'full') { %>import {<%= blockName %>PresComponent} from '../presenter/<%= kebabCaseBlockName %>-pres.component';
<% } %>
<% if (useContext) { %>import {<%= componentContext %>} from './<%= name %>.context';<% } %>
@O3rComponent({
  componentType: '<%= componentType %>'
})
@Component({
  selector: '<%= componentSelector %><% if (!!suffix) { %>-<%= suffix %><% } %>',<% if (standalone) { %>
  standalone: true,
  imports: [CommonModule<% if (componentStructure === 'full') { %>, <%= blockName %>PresComponent<% } %>],<% } %>
  templateUrl: './<%= name %>.template.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
  encapsulation: ViewEncapsulation.None
})
export class <%= componentName %> implements
  OnInit,
  OnDestroy<% if (useContext) { %>,
  <%= componentContext %><% } %> {
  /**
   * List of subscriptions to unsubscribe on destroy
   */
  private subscriptions: Subscription[] = [];

  constructor() {}

  public ngOnInit() {
    // Run on component initialization
  }

  public ngOnDestroy() {
    // clean the subscriptions
    this.subscriptions.forEach((subscription) => subscription.unsubscribe());
  }
}
