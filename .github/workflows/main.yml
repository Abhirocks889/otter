name: Main CI

concurrency:
  group: ci-${{ github.ref }}-main
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main
      - 'release/*'
  merge_group:
    types: [checks_requested]

jobs:
  nx-cloud-start:
    runs-on: ubuntu-latest
    name: Start Nx Cloud Agents
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./tools/github-actions/setup
      - run:  yarn nx-cloud start-ci-run --agent-count=3
  nx-cloud-end:
    runs-on: ubuntu-latest
    needs: [build, checks, test-publish]
    name: Stop Nx Cloud Agents
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./tools/github-actions/setup
      - run:  yarn nx-cloud stop-all-agents

  build:
    runs-on: ubuntu-latest
    needs: ['nx-cloud-start']
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./tools/github-actions/setup
      - uses: ./.github/actions/setup-java
        with:
          install-jdk: 'true'
      - run: yarn build:swagger-gen --dte
      - run: yarn build --dte
      - uses: ./tools/github-actions/upload-build-output

  version:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      nextVersionTag: ${{ steps.newVersion.outputs.nextVersionTag }}
      isPreRelease: ${{ contains( steps.newVersion.outputs.nextVersionTag, '-' ) || github.event_name == 'pull_request' || github.event_name == 'merge_group'}}
    steps:
      - uses: actions/checkout@v3
      - uses: ./tools/github-actions/setup
      - name: New Version
        id: newVersion
        uses: ./tools/github-actions/new-version
        with:
          defaultBranch: main
          defaultBranchPrereleaseName: alpha
      - name: Create release
        if: github.event_name != 'pull_request' && github.event_name != 'merge_group'
        run: gh release create v${{ steps.newVersion.outputs.nextVersionTag }} --generate-notes ${{ contains( steps.newVersion.outputs.nextVersionTag, '-' ) && '--prerelease' || '' }} --target ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  checks:
    uses: ./.github/workflows/code-check.yml
    secrets:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    with:
      affected: ${{ github.event_name == 'pull_request' }}
    needs: ['nx-cloud-start']

  test-publish:
    uses: ./.github/workflows/test-publish.yml
    secrets:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    needs: [build]

  publish-packages:
    uses: ./.github/workflows/publish.yml
    if: ${{ github.event_name != 'pull_request' && github.event_name != 'merge_group' }}
    permissions:
      packages: write
      contents: read
    secrets: inherit
    needs: [version, build, checks, test-publish]
    with:
      version: ${{ needs.version.outputs.nextVersionTag }}
      prerelease: ${{ needs.version.outputs.isPreRelease == 'true' }}
  publish-packages-pr:
    uses: ./.github/workflows/publish.yml
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      packages: write
      contents: read
    secrets: inherit
    needs: [version, build]
    with:
      version: ${{ needs.version.outputs.nextVersionTag }}
      prerelease: ${{ needs.version.outputs.isPreRelease == 'true' }}

  documentation-main:
    secrets: inherit
    needs: [version, build, checks]
    if: ${{ github.event_name != 'pull_request' && github.event_name != 'merge_group' && github.ref_name == 'main' }}
    uses: ./.github/workflows/documentation.yml
    with:
      version: ${{ needs.version.outputs.nextVersionTag }}
  documentation-pr:
    secrets: inherit
    needs: [version]
    if: ${{ (github.event_name == 'pull_request' && github.base_ref == 'main') || github.event_name == 'merge_group' }}
    uses: ./.github/workflows/documentation.yml
    with:
      version: ${{ needs.version.outputs.nextVersionTag }}
      shouldDeploy: false
